version = "3.7.4"

style = defaultWithAlign

indent.main = 2
trailingCommas = preserve
indent.significant = 4
indent.callSite = 2
indent.ctrlSite = 2
indent.defnSite = 2
indent.ctorSite = 2
indent.matchSite = 2
indent.caseSite = 4
indent.extendSite = 4
indent.withSiteRelativeToExtends = 0
indent.commaSiteRelativeToExtends = 2
indent.extraBeforeOpenParenDefnSite = 0
newlines.beforeOpenParenDefnSite = fold
# indent.relativeToLhsLastLine = []
indent.relativeToLhsLastLine = [match, infix]
# binPack.indentCallSiteOnce = false
# binPack.unsafeCallSite = true
# binPack.indentCallSiteSingleArg = true
indentOperator.exemptScope = all


indentOperator.preset      = spray
maxColumn                  = 150
rewrite.rules              = [RedundantParens, SortImports, AvoidInfix]
align.tokens               = [
  {
    code = "=>"  
    owners = [{
      regex = "Case"
     }]},
  {
    code = "%"
    owners = [{
      regex = "Term.ApplyInfix"
    }]
  },
  {
    code = "%%"
    owners = [{
      regex = "Term.ApplyInfix"
    }]
  },
  {
    code = "extends"
    owners = [{
      regex = ".*"
    }]
  },
]

align.openParenDefnSite    = false
align.arrowEnumeratorGenerator = true

align.closeParenSite = true
danglingParentheses.callSite = true
align.openParenCallSite = false

align.openParenCtrlSite = false
align.openParenTupleSite = true

align.beforeOpenParenCallSite = false
align.beforeOpenParenDefnSite = false

align.preset = more
align.multiline = true
align.allowOverflow = true

align.inInterpolation = true
newlines.inInterpolation = oneline

newlines.source = keep
newlines.topLevelStatementBlankLines = [
 {
    blanks = 1
  }
]
newlines.beforeMultiline = unfold
newlines.alwaysBeforeElseAfterCurlyIf = false
newlines.beforeCurlyLambdaParams = always
newlines.implicitParamListModifierPrefer = before
# newlines.implicitParamListModifierForce = [before,after]



optIn.configStyleArguments = false
danglingParentheses.preset = false
spaces.inImportCurlyBraces = true
newlines.afterCurlyLambda  = preserve

rewrite.neverInfix.excludeFilters = [
  and
  min
  max
  until
  to
  by
  eq
  ne
  "should.*"
  "contain.*"
  "must.*"
  in
  ignore
  be
  taggedAs
  thrownBy
  synchronized
  have
  when
  size
  only
  noneOf
  oneElementOf
  noElementsOf
  atLeastOneElementOf
  atMostOneElementOf
  allElementsOf
  inOrderElementsOf
  theSameElementsAs
]
rewriteTokens = {
  "⇒": "=>"
  "→": "->"
  "←": "<-"
}
runner.dialect = scala3
